apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "authorization-server.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "authorization-server.name" . }}
    helm.sh/chart: {{ include "authorization-server.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  {{- if .Values.enableRollingUpdate }}
  strategy:
    type: RollingUpdate
  {{- end }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "authorization-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "authorization-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        timestamp: "{{ .Release.Time.Seconds }}"
    spec:
      containers:
        - name: {{ .Chart.Name }}-backend
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /info
              port: 3000
          readinessProbe:
            httpGet:
              path: /info
              port: 3000
          env:
            - name: "BULL_QUEUE_REDIS_HOST"
              value: {{ template "redis.fullname" . }}-master
            - name: "BULL_QUEUE_REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key:  bullQueueRedisPassword
                  name: {{ .Release.Name }}-secrets
            - name: "BULL_QUEUE_REDIS_PORT"
              value: "6379"
            - name: "SESSION_SECRET"
              valueFrom:
                secretKeyRef:
                  key:  sessionSecret
                  name: {{ .Release.Name }}-secrets
            - name: "EXPIRY_DAYS"
              value: "1"
            - name: "COOKIE_MAX_AGE"
              value: {{ .Values.cookieMaxAge | quote }}
            - name: "SESSION_NAME"
              value: {{ .Values.sessionName }}
            - name: "TOKEN_VALIDITY"
              value: {{ .Values.tokenValidity | quote }}
            - name: "DB_HOST"
              value: {{ .Values.dbHost }}
            - name: "DB_NAME"
              value: {{ .Values.dbName }}
            - name: "DB_USER"
              value: {{ .Values.dbUser }}
            - name: "DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key:  authorizationServerMongodbPassword
                  name: {{ .Release.Name }}-secrets
            - name: "NODE_ENV"
              value: {{ .Values.NODE_ENV }}
        - name: {{ .Chart.Name }}-frontend
          image: "{{ .Values.frontendImage.repository }}:{{ .Values.frontendImage.tag }}"
          imagePullPolicy: {{ .Values.frontendImage.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
